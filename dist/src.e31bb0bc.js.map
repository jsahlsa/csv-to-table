{"version":3,"sources":["index.js"],"names":["document","getElementById","innerHTML","uploadButton","querySelector","fileUpload","upload","file","files","reader","FileReader","readAsText","onload","e","table","createElement","setAttribute","rows","result","replace","trim","split","i","length","cells","console","log","splice","row","insertRow","j","cell","insertCell","tableContainer","appendChild","addEventListener"],"mappings":"AAEAA,QAAQ,CAACC,cAAT,CAAwB,KAAxB,EAA+BC,SAA/B;AAaA,IAAMC,YAAY,GAAGH,QAAQ,CAACI,aAAT,CAAuB,SAAvB,CAArB;AACA,IAAMC,UAAU,GAAGL,QAAQ,CAACI,aAAT,CAAuB,OAAvB,CAAnB;;AAEA,SAASE,MAAT,GAAkB;AAChB,MAAIC,IAAI,GAAGF,UAAU,CAACG,KAAX,CAAiB,CAAjB,CAAX;AAEA,MAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;AAEAD,EAAAA,MAAM,CAACE,UAAP,CAAkBJ,IAAlB;;AACAE,EAAAA,MAAM,CAACG,MAAP,GAAgB,UAAUC,CAAV,EAAa;AAC3B;AAEA;AACA,QAAMC,KAAK,GAAGd,QAAQ,CAACe,aAAT,CAAuB,OAAvB,CAAd;AACAD,IAAAA,KAAK,CAACE,YAAN,CAAmB,iBAAnB,EAAsC,EAAtC;AACA,QAAIC,IAAI,GAAGR,MAAM,CAACS,MAAP,CACRC,OADQ,CACA,WADA,EACa,EADb,EAERC,IAFQ,GAGRC,KAHQ,CAGF,IAHE,CAAX,CAN2B,CAU3B;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACM,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UAAIE,KAAK,GAAGP,IAAI,CAACK,CAAD,CAAJ,CAAQD,KAAR,CAAc,GAAd,CAAZ;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAAC,CAAD,CAAjB;AACAA,MAAAA,KAAK,CAACG,MAAN,CAAa,EAAb,EAAiB,CAAjB;AACAH,MAAAA,KAAK,CAACG,MAAN,CAAa,EAAb,EAAiB,CAAjB;AACAH,MAAAA,KAAK,CAACG,MAAN,CAAa,CAAb,EAAgB,CAAhB;AACAH,MAAAA,KAAK,CAACG,MAAN,CAAa,CAAb,EAAgB,CAAhB;;AAEA,UAAIH,KAAK,CAACD,MAAN,GAAe,CAAnB,EAAsB;AACpB,YAAIK,GAAG,GAAGd,KAAK,CAACe,SAAN,CAAgB,CAAC,CAAjB,CAAV;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAACD,MAA1B,EAAkCO,CAAC,EAAnC,EAAuC;AACrC,cAAIC,IAAI,GAAGH,GAAG,CAACI,UAAJ,CAAe,CAAC,CAAhB,CAAX;AACAD,UAAAA,IAAI,CAAC7B,SAAL,GAAiBsB,KAAK,CAACM,CAAD,CAAtB;AACD;AACF;AACF;;AACD,QAAMG,cAAc,GAAGjC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAAvB;AACAgC,IAAAA,cAAc,CAAC/B,SAAf,GAA2B,EAA3B;AACA+B,IAAAA,cAAc,CAACC,WAAf,CAA2BpB,KAA3B;AACD,GApCD;AAqCD;;AAEDX,YAAY,CAACgC,gBAAb,CAA8B,OAA9B,EAAuC7B,MAAvC","file":"src.e31bb0bc.js","sourceRoot":"../src","sourcesContent":["\n\ndocument.getElementById(\"app\").innerHTML = `\n<h1>Hello Vanilla!</h1>\n<div>\n  We use the same configuration as Parcel to bundle this sandbox, you can find more\n  info about Parcel \n  <a href=\"https://parceljs.org\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>\n  <input type=\"file\" />\n  <input type=\"button\" value=\"upload\" id=\"upload\" /> \n  <div id=\"table-wrapper\">\n  </div>\n</div>\n`;\n\nconst uploadButton = document.querySelector(\"#upload\");\nconst fileUpload = document.querySelector(\"input\");\n\nfunction upload() {\n  let file = fileUpload.files[0];\n\n  let reader = new FileReader();\n\n  reader.readAsText(file);\n  reader.onload = function (e) {\n    // replace double quotes and extract each row as an array item\n\n    // console.log(reader.result);\n    const table = document.createElement(\"table\");\n    table.setAttribute(\"contenteditable\", \"\");\n    let rows = reader.result\n      .replace(/(\")|(\\r)/g, \"\")\n      .trim()\n      .split(\"\\n\");\n    // let cells = rows.map((item, i) => {\n    //   return item.split(\",\");\n    // });\n    // should be carrier code\n    // each row is sub array\n    // console.log(cells[0][0]);\n\n    for (let i = 0; i < rows.length; i++) {\n      let cells = rows[i].split(\",\");\n      console.log(cells[0]);\n      cells.splice(19, 2);\n      cells.splice(12, 5);\n      cells.splice(6, 4);\n      cells.splice(1, 4);\n\n      if (cells.length > 1) {\n        let row = table.insertRow(-1);\n        for (let j = 0; j < cells.length; j++) {\n          let cell = row.insertCell(-1);\n          cell.innerHTML = cells[j];\n        }\n      }\n    }\n    const tableContainer = document.getElementById(\"table-wrapper\");\n    tableContainer.innerHTML = \"\";\n    tableContainer.appendChild(table);\n  };\n}\n\nuploadButton.addEventListener(\"click\", upload);\n"]}